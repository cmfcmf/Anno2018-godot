extends Node


func generate_buildings():
	var object_data = load_object_data()
	
	for item in object_data['HAUS']['items'].values():
		assert(item.has('Gfx'))
		assert(item.has('Id'))
		#if item.has("Size") and item.has("Rotate"):
		#	assert(item['Size'][0] * item['Size'][1] == item['Rotate'])
		if item.has('Kind'):
			if item['Kind'] in ['GEBAEUDE', 'STRASSE']:
				dump_building(item)
			elif item['Kind'] in [
				'BODEN', 'MEER', 'WALD', 'RUINE', 
				'STRANDRUINE', 'BRANDECK', 'HANGQUELL', 'HANGECK', 'STRANDVARI', 'STRANDHAUS', 
				'HQ', 'STRANDECKI', 'STRANDECKA', 'HAFEN', 'FELS', 'FLUSS', 'FLUSSECK']:
				dump_land(item)

func dump_land(item):
	var output_dir = Directory.new()
	assert(output_dir.open("res://imported/land") == OK)

	if not item.has('Size'):
		# TODO: These don't seem to be parsed correctly.
		return

	var id = item['Id']
	var gfx = item['Gfx']
	var kind = item['Kind']
	var size = Vector2(item['Size'][0], item['Size'][1])
	
	dump_file(output_dir, id, "gd", """#
# This file has been GENERATED. DO NOT EDIT THIS FILE.
#

extends "../../base.gd"
func init():
	b_id = %s
	b_gfx = %s
	b_kind = "%s"
	b_size = Vector2(%s, %s)
	
	.init()""" % [id, gfx, kind, size.x, size.y])

	dump_tscn(output_dir, id)

func dump_building(item):
	var output_dir = Directory.new()
	assert(output_dir.open("res://imported/buildings") == OK)
	
	if not item.has('Size') or not item.has('Baugfx'):
		# TODO: These don't seem to be parsed correctly.
		return

	var id = item['Id']
	var gfx = item['Gfx']
	var kind = item['Kind']
	var size = Vector2(item['Size'][0], item['Size'][1])
	var gfx_menu = 154 # TODO
	var gfx_bau = item['Baugfx']

	dump_file(output_dir, id, "gd", """#
# This file has been GENERATED. DO NOT EDIT THIS FILE.
#

extends "../../base_building.gd"
func init():
	b_id = %s
	b_name = "%s"
	b_gfx = %s
	b_kind = "%s"
	b_size = Vector2(%s, %s)
	b_gfx_menu = %s
	b_gfx_bau = %s
	
	.init()""" % [id, gfx, gfx, kind, size.x, size.y, gfx_menu, gfx_bau])
	
	dump_tscn(output_dir, id)

func dump_tscn(output_dir, id):
	dump_file(output_dir, id, "tscn", """[gd_scene load_steps=2 format=2]

[ext_resource path="%s/%s/%s.gd" type="Script" id=1]

[node name="%s" type="Node"]

script = ExtResource( 1 )


""" % [output_dir.get_current_dir(), id, id, id])

func dump_file(output_dir, id, extension, content):
	if not output_dir.dir_exists(str(id)):
		assert(output_dir.make_dir(str(id)) == OK)
	
	var file = File.new()
	assert(file.open(output_dir.get_current_dir() + "/" + str(id) + "/" + str(id) + "." + extension, File.WRITE) == OK)
	file.store_string(content)
	file.close()

func load_object_data():
	var object_data_file = File.new()
	object_data_file.open("res://imported/anno-objects.json", File.READ)
	var parse_result = JSON.parse(object_data_file.get_as_text())
	assert(parse_result.error == OK)
	
	return parse_result.result